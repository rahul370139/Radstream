name: RadStream CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check .
    
    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  aws-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy infrastructure
      run: |
        python shared/infrastructure/s3_setup.py
        python shared/infrastructure/eventbridge_setup.py
        python shared/infrastructure/stepfunctions_setup.py
        python shared/infrastructure/lambda_setup.py
        python shared/infrastructure/kinesis_setup.py
        python shared/telemetry/glue_schema.py
    
    - name: Deploy Lambda functions
      run: |
        python rahul/preprocessing/validate_metadata.py
        python rahul/preprocessing/prepare_tensors.py
        python rahul/preprocessing/store_results.py
        python rahul/preprocessing/send_telemetry.py
    
    - name: Deploy EKS cluster
      run: |
        # Mukul's EKS deployment scripts would go here
        echo "EKS deployment handled by Mukul"
    
    - name: Deploy security components
      run: |
        # Karthik's security deployment scripts would go here
        echo "Security deployment handled by Karthik"

  performance-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [aws-deploy]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      run: |
        python rahul/scripts/upload_images.py --num-images 10
        python rahul/scripts/benchmark.py --num-studies 5
    
    - name: Generate performance report
      run: |
        echo "Performance test completed"
        # Generate and upload performance reports
